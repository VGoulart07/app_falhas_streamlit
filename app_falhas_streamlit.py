import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√µes iniciais do app
st.set_page_config(page_title="An√°lise de Falhas - UFV", layout="centered")

# CSS para fundo preto e cores no texto
st.markdown("""
    <style>
        body {
            background-color: #0e0e0e;
            color: #f0f0f0;
        }
        .stApp {
            background-color: #0e0e0e;
            color: #f0f0f0;
        }
        .block-container {
            padding-top: 2rem;
        }
        h1, h2, h3, h4 {
            color: #f9f871;
        }
        .stDataFrame {
            background-color: #1e1e1e;
        }
    </style>
""", unsafe_allow_html=True)

# Dados das falhas
falhas = {
    "Soltec": {
        "NCU perdeu comunica√ß√£o": 1,
        "Tracker parado por falha Motor_baterias_comlost": 30,
        "Inject TCU modo fact": 4,
        "TCU em curto + inject": 1,
        "Eixo Cardan": 1,
        "Falha de Motor TCU": 1
    },
    "Sungrow": {
        "Falha de Ventila√ß√£o no inversor": 1,
        "Falha de Imped√¢ncia (ISOLA√á√ÉO)": 1,
        "Falha de Prote√ß√£o PDP (mau contato nas conex√µes)": 1
    },
    "PV": {
        "Fus√≠vel rompido na string": 1,
        "Cabo solar danificado": 3,
        "Fus√≠vel 400A DC atuado": 1,
        "Conector MC4 danificado": 1
    },
    "M√≥dulos": {
        "Junction box danificada": 150
    }
}

acoes = [
    "Plano de Manuten√ß√£o PCS-SKID ‚Äì quinzenal/mensal ‚Äì Conclu√≠do 08/07",
    "Plano de Manuten√ß√£o Trafo ‚Äì Semestral ‚Äì Conclu√≠do 07/07",
    "Inspe√ß√£o Combiner BOX (performance) ‚Äì Conclu√≠do 11/07",
    "Plano de esta√ß√£o meteorol√≥gica ‚Äì mensal ‚Äì Conclu√≠do 11/07",
    "Plano Inversor Central - mv Station - Check-list Semestral/Trimestral - Em Andamento"
]

observacoes = [
    "01/07 a 02/07: Tracker parado por MODO FACT at√© as 16h",
    "03/07: Motor de TCU com falha ‚Äì 3 horas inoperante",
    "08/07: Falha ventilador inversor 2.1-2 ‚Äì troca levou 24 horas",
    "10/07: Falha de Prote√ß√£o PDP (mau contato em conex√µes de fases ‚Äì 1 hora parada)",
    "Limpeza de 2 strings Combiner 17 ‚Üí aumento de corrente de 5,8A para 7,8A (~34,48%)"
]

# Processamento dos dados
df_falhas = []
for categoria, eventos in falhas.items():
    for falha, qtd in eventos.items():
        df_falhas.append({"Categoria": categoria, "Falha": falha, "Ocorr√™ncias": qtd})
df = pd.DataFrame(df_falhas)
df_total = df.groupby("Categoria")["Ocorr√™ncias"].sum().reset_index()

# Mapeamento de cores vibrantes para cada categoria
colors = {
    "Soltec": "#00f7ff",      # ciano neon
    "Sungrow": "#f72585",     # rosa neon
    "PV": "#ffd60a",          # amarelo vibrante
    "M√≥dulos": "#80ffdb"      # verde √°gua
}
df_total["Cor"] = df_total["Categoria"].map(colors)

# Layout do app
st.title("üìä An√°lise de Falhas - Julho 2025")
st.markdown("<h4 style='color:#00f7ff'>Relat√≥rio consolidado de falhas da usina fotovoltaica UFV - Per√≠odo: 01 a 14 de Julho</h4>", unsafe_allow_html=True)

# Gr√°fico interativo com Plotly
fig = px.bar(
    df_total,
    x="Categoria",
    y="Ocorr√™ncias",
    color="Categoria",
    color_discrete_map=colors,
    text="Ocorr√™ncias",
    title="Falhas por Categoria"
)

fig.update_layout(
    plot_bgcolor="#0e0e0e",
    paper_bgcolor="#0e0e0e",
    font=dict(color="white"),
    title_font=dict(color="#f9f871"),
    xaxis=dict(title="", color="white"),
    yaxis=dict(title="Ocorr√™ncias", color="white"),
    legend=dict(font=dict(color="white")),
)

fig.update_traces(
    textposition="outside",
    hovertemplate="<b>%{x}</b><br>Ocorr√™ncias: %{y}<extra></extra>"
)

st.plotly_chart(fig, use_container_width=True)

# Detalhamento das falhas
st.subheader("üìã Detalhamento de Falhas")
with st.expander("üîé Clique para ver as falhas detalhadas"):
    st.dataframe(df.style.background_gradient(cmap="cividis"), use_container_width=True)

# A√ß√µes executadas
st.subheader("‚úÖ A√ß√µes Executadas")
for acao in acoes:
    st.markdown(f"<span style='color:#80ffdb'>- {acao}</span>", unsafe_allow_html=True)

# Observa√ß√µes t√©cnicas
st.subheader("üìù Observa√ß√µes T√©cnicas")
for obs in observacoes:
    st.markdown(f"<span style='color:#f72585'>- {obs}</span>", unsafe_allow_html=True)
